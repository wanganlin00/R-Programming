# 元编程

元编程（meta programming）是一种认为代码是可以通过编程检查和修改的数据（R代码可以描述为树，abstract syntax tree）的概念。例如，在最基本的层面，它允许你 `library(purrr)` 而无需`library("purrr")`；在更深层次，允许使用表达式`y ~ x1 + x2`代表一个模型，等等。

与元编程紧密相关的是**非标准求值（non-standard evaluations，NSE）**，不遵循通常的求值规则，而是捕获键入的表达式并以自定义的方式对其进行求值。

**整洁求值( tidy evaluation)**

1.  data masking

2.  quosure

3.  quasiquotation

```{r include=FALSE}
if(!require(lobstr)) install.packages("lobstr")
```

```{r}
library(rlang)
library(lobstr)
```

## 表达式

constant scalars, symbols, call objects, and pairlists

### 常量

数值型，字符型，逻辑型

```{r}
# constant
num <- expr(123)
string <- expr("Variable")

class(num)
class(string)
expr(TRUE) %>% class()
```

### 符号

symbol表示对象的名称（`name`）

```{r}
# 字符串转换名称
expr(x) == rlang::sym("x")

char <- "Variable"
# symbol  name
sbl <- sym(char)
sbl

class(sbl)
sbl |> as_string()

# 字符串与符号

as_string(expr(x))
str(expr(x))
is.symbol(expr(x))
```

符号的长度始终为1，多个符号使用`rlang::syms()`

### 调用

```{r}
# call

call2("mean", x = expr(x), na.rm = TRUE)
call2(expr(base::mean), x = expr(x), na.rm = TRUE)
call2("<-", expr(x), 10)

call <- call2("+", 1, call2("*", 2, 3))

call

class(call)
```

调用对象是一种特殊类型的列表，其中第一个组件指定要调用的函数名称（通常为符号），其余元素是该函数调用的参数。

```{r}
lobstr::ast(read.table(file = "important.csv", row.names = FALSE))

x <- expr(read.table(file = "important.csv", row.names = FALSE))

x

typeof(x)
```

```{r}
x[[1]]
is.symbol(x[[1]])
as.list(x[-1])
x$header <- TRUE
x
```

由于 R 灵活的参数匹配规则，从调用中提取特定参数具有挑战性：它可能位于任何位置，具有全名、缩写名称或无名称。若要解决此问题，可以使用 `rlang::call_standardise()`标准化所有参数来使用全名。

```{r}
rlang::call_standardise(x)
```

#### 函数位置

```{r}
lobstr::ast("foo"())
lobstr::ast(foo())
lobstr::ast(pkg::foo(1))
lobstr::ast(foo(1)(2))
```

### 配对列表

```{r}
f <- expr(function(x, y = 10) x + y)

args <- f[[2]]
args
typeof(args)
pl <- pairlist(x = 1, y = 2)
length(pl)
pl$x
```

### 缺失参数

空符号，empty symbol，表示缺失的参数

```{r eval=FALSE}
missing_arg()
typeof(missing_arg())
is_missing(missing_arg())
```

### `...`

```{r}
g <- expr(function(...) list(...))
g
args <- g[[2]]
args 
is_missing(args[[1]])
```

### 表达式向量

```{r}
exp1 <- parse(text = c("
x <- 4
x
"))
exp2 <- expression(x <- 4, x)

typeof(exp1)
typeof(exp2)

exp1
exp2
```

表达式向量的行为也类似于列表

```{r}
exp1[[1]]
```

## 解析表达式

```{r}
# 字符串
x1 <- "y <- x + 10"
x1
is.call(x1)


as.formula("y~ x1+x2")

# 表达式
x2 <- rlang::parse_expr(x1)
x2
is.call(x2)
```

## 捕获代码结构 `expression`

表达式 （**expression** ）指 捕获的代码结构 ，包括四种类型（调用call、符号symbol、常量constant或配对列表pairlist）。

### `expr() 和 enexpr()`

```{r}
rlang::expr(mean(x, na.rm = TRUE))
```

```{r}
capture_it <- function(x) {
  expr(x)
}
capture_it(a + b + c)
```

捕获用户输入的函数参数

```{r}
capture_it <- function(x) {
  enexpr(x)
}

capture_it(mtcars$mpg)
```

### 增删改操作

捕获表达式后，可以检查和修改它，方法与列表类似。

捕获的表达式分为两个部分

1.  第一个元素为函数调用`call`

2.  其他部分为位置参数或嵌套调用

```{r}
f <- expr(fn <- anystrings(x = 1, y = 2))
expr(`<-`(fn,anystrings(x = 1, y = 2)))
f[[1]]
f[[2]]
f[[3]]


f[[3]][[1]]
f[[3]]$x
f[[3]]$z <- 3
f


f[[3]][[2]] <- NULL
f
```

## 执行表达式

将代码的结构描述`expression`和执行`evaluate`分开。

```{r}
z <- rlang::expr(y <- x * 10)
z
x <- 8
eval(z)
y
```

```{r}
base::eval(expr(x + y), env(x = 1, y = 10))
```

如果省略环境，将使用当前环境

```{r}
x <- 10
y <- 100
eval(expr(x + y))
```

## 函数自定义求值

Rebinding functions，改变函数内部的变量绑定

```{r}

# 字符串的加法和乘法 多态
string_math <- function(x) {
  e <- env(
    caller_env(),
    `+` = function(x, y) paste0(x, y),
    `*` = function(x, y) strrep(x, y)
  )

  eval(enexpr(x), e)
}

name <- "Hadley"
string_math("Hello " + name)
string_math(("x" * 2 + "-y") * 3)
```

`dplyr`将这个想法发挥到了极致，在生成 SQL 以在远程数据库中执行的环境中运行代码：

```{r}
library(dplyr)
con <- DBI::dbConnect(RSQLite::SQLite(), filename = ":memory:")
mtcars_db <- copy_to(con, mtcars)

mtcars_db %>%
  filter(cyl > 2) %>%
  select(mpg:hp) %>%
  head(10) %>%
  show_query()

DBI::dbDisconnect(con)
```

## 数据自定义求值

在数据处理和分析中，"data masking"（数据掩蔽）是一种技术，用于隐藏或保护敏感信息，同时保留数据集中的模式和结构，以供分析使用。

1.  替换：将敏感数据替换为假数据或占位符。

2.  加密：对数据进行加密处理，只有拥有密钥的人才能访问原始数据。

3.  扰动：对数据进行小的随机变化，以保护数据的统计特性，同时避免识别出原始数据。

使用数据掩码进行求值是交互式分析的有用技术，因为它允许您编写 `x + y`而不是`df$x + df$y` .然而，这种便利是有代价的：模棱两可

```{r}
set.seed(10)
df <- data.frame(x = 1:5, y = sample(5))

df
eval_tidy(expr(x + y), df)
```

`base::with`

```{r}
with2 <- function(df, expr) {
  eval_tidy(enexpr(expr), df)
}

with2(df, x + y)
```

## 抽象语法树

表达式（expressions） 也称为抽象语法树（ abstract syntax trees ，ASTs）。

### 树结构

1.  实际运行代码，橙色矩形是分支，紫色符号是函数调用，白色是函数参数

2.  渲染成书后，灰色矩形是分支，右连函数调用，下连子项参数或函数

```{r}
library(rlang)
library(lobstr)
lobstr::ast(f(g(1, 2), h(3, 4, i())))
```

### 空格和注释

```{r}
ast(
  f(x,  y)  # important!
)

lobstr::ast(y <-  x)

lobstr::ast(y < -x)
```

### 中缀调用

```{r}
x <- 4
`<-`(y,x)
`<-`(y, `*`(x, 10))
expr(`<-`(y, `*`(x, 10)))
lobstr::ast(y <- x * 10)
```

```{r}
x3 <- "a <- 1; a + 1"
rlang::parse_exprs(x3)
```

```{r}
z <- expr(y <- x + 10)
expr_text(z)
```

## quosure

```{r}
with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enexpr(expr), df)
}

df <- data.frame(x = 1:3)
a <- 10
with2(df, x + a)
```

将表达式与环境捆绑在一起的 `quosure` 数据结构,每当使用数据掩码时，必须始终使用`enquo()` 而不是`enexpr()`

```{r}
with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enexpr(expr), df)
}

with2(df, x + a)
```

## 取消引用

**unquote operator** `!!`（发音为 bang-bang）

```{r}

# call
xx <- expr(x + x)
yy <- expr(y + y)

expr(!!xx / !!yy)
```

```{r}
# 变异系数
cv <- function(var) {
  var <- enexpr(var)
  expr(sd(!!var) / mean(!!var))
}

cv(x)
cv(x + y)
```
