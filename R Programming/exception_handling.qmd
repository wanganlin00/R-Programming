# 异常处理

R中的条件（condition）系统提供了一组成对的工具，提示函数正在发生异常情况，并允许该函数的用户处理它

## signals conditions

-   `stop()` for errors
-   `warning()` for warnings
-   `message()` for messages

```{r error=TRUE}
stop("This is what an error looks like")


warning("This is what a warning looks like")


message("This is what a message looks like")

print("Running...")
cat("Running...\n")
```

### error

停止执行并返回到顶部

```{r error=TRUE}
h <- function() stop("This is an error!")
h()

# 不包含调用信息
h <- function() stop("This is an error!", call. = FALSE)
h()

h <- function() rlang::abort("This is an error!")
h()
```

### warning

捕获警告并聚合显示

-   要使警告立即显示，请设置 options(warn = 1)

-   要将警告转换为错误，请设置 [`options(warn = 2)`](https://rdrr.io/r/base/options.html)。这通常是 调试警告的最简单方法，因为一旦出现错误，就可以 使用工具，例如查找源头[`traceback()`](https://rdrr.io/r/base/traceback.html)

-   使用 [`options(warn = 0)`](https://rdrr.io/r/base/options.html)恢复默认行为。

```{r}
fw <- function() {
  cat("1\n")
  warning("W1")
  cat("2\n")
  warning("W2")
  cat("3\n")
  warning("W3",call. = FALSE)
}
fw()

fw <- function() {
  cat("1\n")
  rlang::warn("W1")
  cat("2\n")
  rlang::warn("W2")
  cat("3\n")
  rlang::warn("W3")
}
fw()
```

### message

消息立即显示

参数`quiet = TRUE` 抑制所有消息`suppressMessages()`

```{r}
# 无 call. 参数
fm <- function() {
  cat("1\n")
  message("M1")
  cat("2\n")
  message("M2")
  cat("3\n")
  message("M3")
}

fm()
```

## 忽略信息

-   忽略错误：`try()`，最好是使用[`tryCatch()`](https://rdrr.io/r/base/conditions.html)

    ```{r error=TRUE}

    try(log("a"))
    try(log("a"),silent = TRUE)
    ```

-   忽略警告。[`suppressWarnings()`](https://rdrr.io/r/base/warning.html)

    ```{r}
    suppressWarnings({
        warning("Uhoh!")
        warning("Another warning")
        1
    })
    ```

-   忽略消息。[`suppressMessages()`](https://rdrr.io/r/base/message.html)

    ```{r}
    suppressMessages({
        message("Hello there")
        "ABC"
    })
    ```

## 条件处理程序

### 条件对象

```{r}
cnd <- rlang::catch_cnd(stop("An error"))
str(cnd)

conditionMessage(cnd)
conditionCall(cnd)
```

### 退出处理程序

处理条件信息

-   `tryCatch()`
-   `withCallingHandlers()`

[`tryCatch()`](https://rdrr.io/r/base/conditions.html)定义**exiting**handlers，，通常用于处理错误情况。它允许您覆盖默认的错误行为。

```{r eval=FALSE}
tryCatch(
  error = function(cnd) {
    # code to run when error is thrown
  },
  code_to_run_while_handlers_are_active
)

```

```{r}
f3 <- function(x) {
  tryCatch(
    error = function(cnd) NA,
    log(x)
  )
}

f3("x")
```

在发出条件信号后，控制权将传递给处理程序，并且永远不会返回到原始代码，这实际上意味着代码退出

```{r}
tryCatch(
  message = function(cnd) "There",
  {
    message("Here")
    stop("This code is never run!")
  }
)

```

类似Python的

```         
try: 
    {}
finally:
    {}
```

```{r}
tryCatch(
  {
    write.table("Hi!", "data/异常处理.csv")
  },
  finally = {
    # always run
    x <- read.table("data/异常处理.csv")
    print("你好")
  }
)
```

### 调用处理程序

[`withCallingHandlers()`](https://rdrr.io/r/base/conditions.html)定义**calling**handlers，适合处理非错误条件，一旦处理程序返回，代码执行将正常继续

```{r eval=FALSE}
withCallingHandlers(
  warning = function(cnd) {
    # code to run when warning is signalled
  },
  message = function(cnd) {
    # code to run when message is signalled
  },
  code_to_run_while_handlers_are_active
)
```

```{r}
tryCatch(
  message = function(cnd) cat("Caught a message!\n"), 
  {
    message("Someone there?")
    message("Why, yes!")
  }
)


withCallingHandlers(
  message = function(cnd) cat("Caught a message!\n"), 
  {
    message("Someone there?")
    message("Why, yes!")
  }
)
```

## 自定义条件

```{r}
library(rlang)

my_log <- function(x, base = exp(1)) {
  if (!is.numeric(x)) {
    abort(paste0(
      "`x` must be a numeric vector; not ", typeof(x), "."
    ))
  }
  if (!is.numeric(base)) {
    abort(paste0(
      "`base` must be a numeric vector; not ", typeof(base), "."
    ))
  }

  base::log(x, base = base)
}
```

```{r error=TRUE}
my_log(letters)
my_log(1:10, base = letters)
```

```{r}
abort_bad_argument <- function(arg, must, not = NULL) {
  msg <- glue::glue("`{arg}` must {must}")
  if (!is.null(not)) {
    not <- typeof(not)
    msg <- glue::glue("{msg}; not {not}.")
  }
  
  abort("error_bad_argument", 
    message = msg, 
    arg = arg, 
    must = must, 
    not = not
  )
}

stop_custom <- function(.subclass, message, call = NULL, ...) {
  err <- structure(
    list(
      message = message,
      call = call,
      ...
    ),
    class = c(.subclass, "error", "condition")
  )
  stop(err)
}

err <- catch_cnd(
  stop_custom("error_new", "This is a custom error", x = 10)
)
class(err)
err$x
```

重写`my_log`

```{r}
my_log <- function(x, base = exp(1)) {
  if (!is.numeric(x)) {
    abort_bad_argument("x", must = "be numeric", not = x)
  }
  if (!is.numeric(base)) {
    abort_bad_argument("base", must = "be numeric", not = base)
  }

  base::log(x, base = base)
}
```

```{r error=TRUE}
my_log(letters)
my_log(letters)
```

## Debugging

`traceback()`: 函数调用栈

```{r error=TRUE}
lm(y ~ x)
traceback() 
```

表示第7次调用函数出现错误。

`debug()` : 标记函数，调用函数时出现错误自动进入browser，输入 `n` 一行一行运行直到出现错误

```{r error=TRUE}
debug(lm)
lm(y ~ x)


# Browse[1]> n
# debug: ret.x <- x
# Browse[1]> n
# debug: ret.y <- y
# Browse[1]> n
# debug: cl <- match.call()
# Browse[1]> n
# debug: mf <- match.call(expand.dots = FALSE)
# Browse[1]> n
# debug: m <- match(c("formula", "data", "subset", "weights", "na.action", 
#     "offset"), names(mf), 0L)
# Browse[1]> n
# debug: mf <- mf[c(1L, m)]
# Browse[1]> n
# debug: mf$drop.unused.levels <- TRUE
# Browse[1]> n
# debug: mf[[1L]] <- quote(stats::model.frame)
# Browse[1]> n
# debug: mf <- eval(mf, parent.frame())
# Browse[1]> n
# Error in eval(predvars, data, env) : object 'y' not found


undebug(lm)
```
