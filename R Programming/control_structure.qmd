# 控制结构

## 顺序结构

## 分支结构

### if() 和 else

```{r}
x <- 10

if(x %%3 ==0) {
    message("能被3整除")
} else {
    message("不能被3整除")
}
```

### ifelse()

```{r}
x <- c(10,9)
ifelse(x %%3 ==0,"能被3整除","不能被3整除")
if_else(x %%3 ==0,"能被3整除","不能被3整除")
```

### case_when()

```{r}
x <- 1:10
dplyr::case_when(
  x %% 35 == 0 ~ "fizz buzz",
  x %% 5 == 0 ~ "fizz",
  x %% 7 == 0 ~ "buzz",
  is.na(x) ~ "???",
  TRUE ~ as.character(x)
)
```

### switch()

```{r error=TRUE}
# 如果多个输入具有相同的输出，则可以将右侧留空，输入将“掉入”到下一个值。这模仿了 C 语句的行为
nlegs <- function(x) {
  switch(x,
    cow = ,
    horse = ,
    dog = 4,
    human = ,
    chicken = 2,
    plant = 0,
    stop("Unknown input")  #最后应该始终抛出错误，否则不匹配的输入将返回 NULL
  )
}
nlegs("cow")

nlegs("do6")

```

## 循环结构

### for

```{r}
for(i in 1:5){
    print(1:i)
}
```

```{r}
for (i in 1:10) {
  if (i < 3) 
    next  # 退出当前迭代,后面不执行了

  print(i)
  
  if (i >= 5)
    break # 退出整个循环
}
```

### while()

```{r}
i <- 0
while(i<=10){
    print(i)
    i=i+1
}
```

```{r}
flag <- TRUE
x <- 0
i <- 0
while(flag){
    x <- x+1
    if(x%%3==0) {
        i <- i+1
        print(x)
    }
    if(i==25) flag <- FALSE
}

```

### repeat()

```{r}
i <- 1

repeat{
  print(i)
  i <- i*2
  if (i > 100) break  # 跳出当前的循环
}
```

```{r}
i <- 1

repeat{
  print(i)
  i <- i*2
  if (i > 200) break()
  if (i > 100) next()  #跳过后续代码的运行进入下一次循环
  print("Can you see me?")
}
```
