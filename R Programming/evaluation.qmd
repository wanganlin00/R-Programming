# Evaluation

"Evaluation"（求值）是指执行代码并计算表达式的值的过程。

1.  **延迟求值**：某些编程语言支持延迟求值（Lazy Evaluation），这意味着表达式的求值被推迟到其结果实际需要时才进行。

2.  **即时求值**：与延迟求值相对的是即时求值（Eager Evaluation），在这种情况下，表达式尽可能早地被求值。

3.  **元编程**：在元编程中，代码可以生成或操作其他代码，求值过程可以应用于这些动态生成的代码。

## 非标准求值

## 整洁求值

Tidy Evaluation (Tidy Eval) 是一个非标准评估的框架，也叫延迟评估。

1.  quasiquotation

2.  quosures

3.  data masking

```{r}
library(tidyverse)
library(rlang)
library(purrr)
```

## Quosure

```{r}
x <- mtcars$mpg
enquo(x)
enquo(mtcars)

mutate(mtcars,!!"cyl") %>% head()
```

```{r}
grouped_mean <- function(data, summary_var, ...) {
  summary_var <- enquo(summary_var)
    group_var <- enquos(...)
 
  data %>%
    group_by(!!!group_var) %>%   ### 准引用  unquote-splice !!! ，发音为 bang-bang-bang，取消引用多个参数
    summarise(mean = mean(!!summary_var))
}

grouped_mean(mtcars, cyl, mpg)


```

```{r}
grouped_mean <- function(data, group_var, summary_var) {
  data %>%
    group_by({{group_var}}) %>%
    summarise(mean = mean({{summary_var}}))
}

grouped_mean(mtcars, cyl, mpg)
```

## Data masking

[data masking](https://dplyr.tidyverse.org/articles/programming.html#data-masking)

-   环境变量(`env-variables`) ，一般你在Rstuido右上角的`Environment`中发现它。比如`n <- 10`这里的`n`

-   数据变量(`data-variables`)，一般指数据框的某个变量。比如`data <- data.frame(x = 1, n = 2)`中的`data$n`

```         
grouped_mean(mtcars, cyl, mpg)
```

`cyl`和`mpg`是打算传递的参数，是环境变量，但我们期望他们在函数中当作mtcars中的数据变量，即当做mtcars的一个列的名字来使用， 那么要完成这个角色转换，就需要引用(quote)和解引用(unquote)两个工序：

-   第一步，用 [`enquo()`](https://rlang.r-lib.org/reference/enquo.html)把用户传递过来的参数引用起来

-   第二步，用 `!!` 取消引用，然后使用参数的内容

这个`quote-unquote`的过程让环境变量名变成了数据变量，也可以理解为在函数评估过程中，数据变量（data-variable）遮盖了环境变量（env-variable），即数据遮盖（data masking），看到cyl，正常情况下，本来应该是到环境变量里去找这个cyl对应的值，然而，数据遮盖机制，插队了，让代码去数据变量中去找cyl以及对应的值。

我们通过[`rlang::qq_show()`](https://rlang.r-lib.org/reference/qq_show.html)看看这个`quote-unquote`机制是怎么工作的

先看看[`qq_show()`](https://rlang.r-lib.org/reference/qq_show.html)

```{r}
  group_var <-  quote(cyl)
summary_var <-  quote(mpg)
    
rlang::qq_show( 
    data %>%
    group_by(!!group_var) %>%
    summarise(mean = mean(!!summary_var))
)
```

## 名称注入

### glue 语法

```{r}
name <- "susan" 
tibble("{name}" := 2)
```


### embracing 语法

```{r}
my_summarise4 <- function(data,by, expr) {   
    data %>% 
        summarise(     "mean_{{expr}}" := mean({{ expr }}),   #embracing拥抱 {{}}     
                       "sum_{{expr}}" := sum({{ expr }}), #拥抱变量会告诉 dplyr使用存储在参数中的值，而不是将参数作为文本变量名称     
                       "n_{{expr}}" := n(),   # 海象运算符（walrus） :=     
                       .by ={{by}}   ) }   

my_summarise4(mpg,by = cyl, expr = displ)
```

何时使用{{}}

-   Data-masking: arrange()filter()summarize() compute with variables

-   Tidy-selection：select()relocate()rename() select variables


```{r}
rr <- function(dt, oldName, newName) { 
 rename(dt, !!rlang::sym(newName) := !! rlang::sym(oldName))
      }

rr(dt = as_tibble(iris), oldName = 'Petal.Width', newName = 'petal') %>%
      head(., 2)
```

